package org.epos.eposdatamodel;

import io.swagger.v3.oas.annotations.media.Schema;
import model.StatusType;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Objects;

/**
 * Contains all the fields to have in place the versiong and the approval process
 */
public abstract class VersioningAndApproval {
	
	 /**
     * versionId is the id of the instance
     */
     @Schema(description = "VersionId is the id of the instance", example = "7346238746372", required = false)
     private String versionId;

    /**
     * instanceId is the id of the instance
     */
    @Schema(description = "InstanceId is the id of the instance", example = "3482364872364782", required = false)
    private String instanceId;

    /**
     * metaId is the id of the entity, is the same across all the different instances
     */
    @Schema(description = "MetaId is the id of the entity, is the same across all the different instances", example = "8423876238756278", required = false)
    private String metaId;

    /**
     * instanceId of the previous version of the instance
     */
    @Schema(description = "AUTOGENERATED - InstanceId of the previous version of the instance", example = "232465346363", required = false)
    private String instanceChangedId;

    /**
     * timestamp when the last change happened
     */
    @Schema(description = "AUTOGENERATED - Timestamp when the last change happened", example = "2024-07-03T00:00:00", required = false)
    private LocalDateTime changeTimestamp;

    /**
     * last operation type
     */
    @Schema(description = "Last operation type", example = "commit", required = false)
    private String operation;

    /**
     * metaId of the editor
     */
    @Schema(description = "AUTOGENERATED - MetaId of the editor", example = "342374275648", required = false)
    private String editorId;

    /**
     * comment of the user when he create the draft
     */
    @Schema(description = "Comment of the user when on commit", example = "Example of comment", required = false)
    private String changeComment;

    /**
     * version tag
     */
    @Schema(description = "version tag", example = "1.0", required = false)
    private String version;

    /**
     * State of the instance
     */
    @Schema(description = "State of the instance (DISCARDERD, ARCHIVED, DRAFT, SUBMITTED, PUBLISHED)", example = "John", required = false)
    private StatusType status;

    /**
     * Mark an entity to be deleted when the fake instance in the approval process is published.
     */
    @Schema(description = "Mark an entity to be deleted when the fake instance in the approval process is published.", example = "true", required = false)
    private String toBeDelete;

    /**
     * If ingested it contains from which file it was ingested.
     */
    @Schema(description = "AUTOGENERATED - If ingested it contains from which file it was ingested.", example = "file://file.ttl", required = false)
    private String fileProvenance;

    /**
     * list of group which the entity belong
     */
    @Schema(description = "list of group ids which the entity belong", example = "32492582346584367", required = false)
    private List<Group> groups;


    public String getVersionId() {
		return versionId;
	}

	public void setVersionId(String versionId) {
		this.versionId = versionId;
	}

	public String getInstanceId() {
        return instanceId;
    }

    public void setInstanceId(String instanceId) {
        this.instanceId = instanceId;
    }

    public String getMetaId() {
        return metaId;
    }

    public void setMetaId(String metaId) {
        this.metaId = metaId;
    }

    public String getInstanceChangedId() {
        return instanceChangedId;
    }

    public void setInstanceChangedId(String instanceChangedId) {
        this.instanceChangedId = instanceChangedId;
    }

    public LocalDateTime getChangeTimestamp() {
        return changeTimestamp;
    }

    public void setChangeTimestamp(LocalDateTime changeTimestamp) {
        this.changeTimestamp = changeTimestamp;
    }

    public String getOperation() {
        return operation;
    }

    public void setOperation(String operation) {
        this.operation = operation;
    }

    public String getEditorId() {
        return editorId;
    }

    public void setEditorId(String editorId) {
        this.editorId = editorId;
    }

    public String getChangeComment() {
        return changeComment;
    }

    public void setChangeComment(String changeComment) {
        this.changeComment = changeComment;
    }

    public String getVersion() {
        return version;
    }

    public void setVersion(String version) {
        this.version = version;
    }

    public StatusType getStatus() {
        return status;
    }

    public void setStatus(StatusType status) {
        this.status = status;
    }

    public String getToBeDelete() {
        return toBeDelete;
    }

    public void setToBeDelete(String toBeDelete) {
        this.toBeDelete = toBeDelete;
    }

    public String getFileProvenance() {
        return fileProvenance;
    }

    public void setFileProvenance(String fileProvenance) {
        this.fileProvenance = fileProvenance;
    }

    public List<Group> getGroups() {
        return groups;
    }

    public void setGroups(List<Group> groups) {
        this.groups = groups;
    }

    @Override
    public String toString() {
        return "VersioningAndApproval{" +
                "instanceId='" + instanceId + '\'' +
                ", metaId='" + metaId + '\'' +
                ", instanceChangedId='" + instanceChangedId + '\'' +
                ", changeTimestamp=" + changeTimestamp +
                ", operation='" + operation + '\'' +
                ", editorId='" + editorId + '\'' +
                ", changeComment='" + changeComment + '\'' +
                ", version='" + version + '\'' +
                ", status=" + status +
                ", toBeDelete='" + toBeDelete + '\'' +
                ", fileProvenance='" + fileProvenance + '\'' +
                ", groups=" + groups +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        VersioningAndApproval that = (VersioningAndApproval) o;
        return Objects.equals(getInstanceId(), that.getInstanceId()) && Objects.equals(getMetaId(), that.getMetaId()) && Objects.equals(getInstanceChangedId(), that.getInstanceChangedId()) && Objects.equals(getChangeTimestamp(), that.getChangeTimestamp()) && Objects.equals(getOperation(), that.getOperation()) && Objects.equals(getEditorId(), that.getEditorId()) && Objects.equals(getChangeComment(), that.getChangeComment()) && Objects.equals(getVersion(), that.getVersion()) && getStatus() == that.getStatus() && Objects.equals(getToBeDelete(), that.getToBeDelete()) && Objects.equals(getFileProvenance(), that.getFileProvenance());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getInstanceId(), getMetaId(), getInstanceChangedId(), getChangeTimestamp(), getOperation(), getEditorId(), getChangeComment(), getVersion(), getStatus(), getToBeDelete(), getFileProvenance());
    }
}
